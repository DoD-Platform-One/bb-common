# Network Policies Configuration
networkPolicies:
  # Enable/disable the generation of NetworkPolicies
  enabled: false

  # # Prepend release name to all generated NetworkPolicy names
  # # Useful when deploying multiple releases in the same namespace
  # prependReleaseName: false

  # # Ingress rules control inbound traffic to pods
  # ingress:
  #   # Generate Istio AuthorizationPolicies alongside NetworkPolicies
  #   # Requires service account identity prefix (e.g., sa@namespace/pod)
  #   generateAuthorizationPolicies: true
  #
  #   # Default ingress policies (all enabled by default when networkPolicies.enabled is true)
  #   defaults:
  #     # Enable/disable all default policies at once
  #     enabled: true
  #     # # Individual default policies (optional - only specify to disable)
  #     # denyAll:
  #     #   enabled: true  # Deny all ingress by default
  #     # allowInNamespace:
  #     #   enabled: true  # Allow ingress from same namespace
  #     # allowPrometheusToIstioSidecar:
  #     #   enabled: true  # Allow Prometheus sidecar scraping (port 15020)
  #
  #   # Define ingress rules for specific pods
  #   to:
  #     # Simple example: API pod accepts traffic on port 8080
  #     api:8080:
  #       # Custom labels and annotations for generated NetworkPolicies
  #       metadata:
  #         labels:
  #           team: backend
  #           environment: production
  #         annotations:
  #           description: "API ingress policies"
  #       from:
  #         # Kubernetes shorthand: namespace/pod or identity@namespace/pod
  #         k8s:
  #           frontend/web: true                    # From web pod in frontend namespace
  #           monitoring/prometheus: true           # From prometheus in monitoring namespace
  #           admin-sa@admin/dashboard: true        # With service account for AuthzPolicy
  #         # Pre-defined rules
  #         definition:
  #           gateway: true      # From Istio ingress gateway
  #           monitoring: true   # From Prometheus
  #
  #     # Example with custom pod selector
  #     database:5432:
  #       podSelector:
  #         matchLabels:
  #           app: postgres
  #           tier: database
  #       from:
  #         k8s:
  #           backend/api: true

  # # Egress rules control outbound traffic from pods
  # egress:
  #   # Exclude specific CIDRs from all ipBlock egress policies (except literals)
  #   excludeCIDRs:
  #     # The metadata endpoint is the only excluded CIDR by default
  #     - 169.254.169.254/32
  #   # Default egress policies (all enabled by default when networkPolicies.enabled is true)
  #   defaults:
  #     # Enable/disable all default policies at once
  #     enabled: true
  #     # # Individual default policies (optional - only specify to disable)
  #     # denyAll:
  #     #   enabled: true        # Deny all egress by default
  #     # allowInNamespace:
  #     #   enabled: true        # Allow egress within same namespace
  #     # allowKubeDns:
  #     #   enabled: true        # Allow DNS resolution (ports 53 TCP/UDP)
  #     # allowIstiod:
  #     #   enabled: true        # Allow Istio control plane (port 15012)
  #
  # # Hook creation configuration for default policies
  # defaultsAsHooks:
  #   enabled: true              # Create hook versions IN ADDITION to regular versions (default: false)
  #   hooks:                     # Hook types (default: ["pre-install", "pre-upgrade", "post-delete"])
  #     - pre-install
  #     - pre-upgrade
  #     - post-delete
  #   weight: -5                 # Hook execution weight (default: -5)
  #   deletePolicies:            # Hook delete policies (default: ["hook-succeeded", "before-hook-creation"])
  #     - hook-succeeded
  #     - before-hook-creation
  #
  #   # Define egress rules for specific pods
  #   from:
  #     # Simple example: app pod with various destinations
  #     app:
  #       # Custom labels and annotations for generated NetworkPolicies
  #       metadata:
  #         labels:
  #           component: application
  #           tier: frontend
  #         annotations:
  #           owner: "platform-team"
  #       to:
  #         # Kubernetes shorthand: namespace/pod:port
  #         k8s:
  #           backend/api:8080: 
  #             enabled: true
  #             # Custom labels/annotations can also be applied to individual rules
  #             metadata:
  #               labels:
  #                 rule-type: api-access
  #               annotations:
  #                 description: "Access to backend API"
  #           cache/redis:[6379,6380]: true       # Multiple ports
  #           database/postgres:5432-5440: true   # Port range
  #           monitoring/*:9090: true             # Any pod in namespace
  #           "*/coredns:53": true                # Any namespace (has to be quotes since it starts with an asterisk)
  #
  #         # CIDR shorthand: IP-range:port
  #         cidr:
  #           10.0.0.0/8:443: true               # Private network HTTPS
  #           0.0.0.0/0:443: true                # Internet (metadata endpoint auto-blocked)
  #
  #         # Pre-defined rules
  #         definition:
  #           kubeAPI: true                      # Kubernetes API access
  #
  #         # Raw NetworkPolicy spec
  #         literal:
  #           database:
  #             enabled: true
  #             spec:
  #               - to:
  #                   - ipBlock:
  #                       cidr: 10.10.10.10/24
  #                 ports:
  #                   - port: 5432
  #                     protocol: TCP
  #
  #     # Example with wildcard selector (all pods)
  #     "*":
  #       to:
  #         k8s:
  #           logging/elasticsearch:9200: true

  # # Custom policy definitions (reusable rules)
  # egress:
  #   definitions:
  #     external-api:
  #       to:
  #         - ipBlock:
  #             cidr: 52.84.0.0/16
  #       ports:
  #         - port: 443
  #           protocol: TCP
  #   from:
  #     app:
  #       to:
  #         definition:
  #           external-api: true

  # # Additional raw NetworkPolicy resources
  # additionalPolicies:
  #   - name: custom-policy
  #     labels:
  #       custom: label
  #     annotations:
  #       description: "Custom network policy"
  #     spec:
  #       podSelector:
  #         matchLabels:
  #           role: special
  #       policyTypes:
  #         - Egress
  #       egress:
  #         - to:
  #             - ipBlock:
  #                 cidr: 192.168.0.0/16

# Routes Configuration
# # Istio VirtualService and gateway configuration for routing traffic to applications
# routes:
#   # Inbound routes configuration
#   inbound:
#     # Simple web application routing
#     my-app:
#       enabled: true                    # Enable/disable this route
#       gateways:                        # List of Istio gateways
#         - istio-gateway/public-ingressgateway
#       hosts:                           # List of host domains (supports templating)
#         - myapp.example.com
#         - myapp.{{ .Values.domain }}   # Templated hostname
#       service: my-app-service          # Target service name (supports templating)
#       port: 8080                       # Target service port (supports templating)
#       selector:                        # Optional - defaults to app.kubernetes.io/name: {route-key}
#         app.kubernetes.io/name: my-app
#       metadata:                        # Custom metadata for all generated resources
#         labels: {}
#         annotations: {}
