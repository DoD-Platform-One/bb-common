suite: Network Policy Tests for all Policies
templates:
  - templates/renderNetworkPolicies.yaml

tests:
  - it: should contain no network policies when disabled
    set:
      networkPolicies.tests.enabled: true
      networkPolicies.bundled.base.enabled: false
    asserts:
      - hasDocuments:
          count: 0
  - it: should contain network policy named "allow-kube-dns-egress"
    set:
      networkPolicies.tests.enabled: true
    documentIndex: 0
    asserts:
      - equal:
          path: metadata.name
          value: allow-kube-dns-egress
  - it: should contain network policy named "deny-all"
    set:
      networkPolicies.tests.enabled: true
    documentIndex: 1
    asserts:
      - equal:
          path: metadata.name
          value: deny-all
  - it: should contain network policy named "allow-intranamespace"
    set:
      networkPolicies.tests.enabled: true
    documentIndex: 2
    asserts:
      - equal:
          path: metadata.name
          value: allow-intranamespace
  - it: should contain network policy named to allow helm test egress when bbtests is enabled
    set:
      networkPolicies.tests.enabled: true
      bbtests.enabled: true
      networkPolicies.bundled.base.enabled: false
    asserts:
      - equal:
          path: metadata.name
          value: allow-helm-test-egress
  - it: should contain network policy to allow istiod egress with correct ports and namespace selector when istio is enabled
    set:
      istio.enabled: true
      networkPolicies.tests.enabled: true
      networkPolicies.bundled.base.enabled: false
      networkPolicies.istioNamespaceSelector.egress: istio-system
    asserts:
      - equal:
          path: metadata.name
          value: allow-istiod-egress
      - contains:
          path: spec.egress[0].to
          content:
            namespaceSelector:
              matchLabels:
                app.kubernetes.io/name: istio-system
            podSelector:
              matchLabels:
                app: istiod
      - equal:
          path: spec.egress[0].ports
          value:
            - port: 15012
              protocol: TCP
            - port: 15014
              protocol: TCP
  - it: should contain network policy to allow prometheus ingress with correct ports and selectors when istio and monitoring is enabled
    documentIndex: 1
    set:
      istio.enabled: true
      monitoring.enabled: true
      networkPolicies.tests.enabled: true
      networkPolicies.bundled.base.enabled: false
    asserts:
      - equal:
          path: metadata.name
          value: allow-prometheus-ingress
      - contains:
          path: spec.ingress[0].from
          content:
            namespaceSelector:
              matchLabels:
                app.kubernetes.io/name: monitoring
            podSelector:
              matchLabels:
                app: prometheus
      - equal:
          path: spec.ingress[0].ports
          value:
            - port: 15020
              protocol: TCP
  - it: should contain network policy to allow tracing egress with correct ports and selectors when tracing is enabled
    set:
      networkPolicies.tests.enabled: true
      networkPolicies.bundled.base.enabled: false
      tracing.enabled: true
    asserts:
      - equal:
          path: metadata.name
          value: allow-tempo-egress
      - contains:
          path: spec.egress[0].to
          content:
            namespaceSelector:
              matchLabels:
                app.kubernetes.io/name: tempo
            podSelector:
              matchLabels:
                app.kubernetes.io/name: tempo
      - equal:
          path: spec.egress[0].ports
          value:
            - port: 9411
  - it: should contain network policy to allow kube api egress with correct cidr when kubApiAccess is enabled
    set:
      networkPolicies.tests.enabled: true
      networkPolicies.bundled.base.enabled: false
      networkPolicies.bundled.kubeApiAccess.enabled: true
    asserts:
      - equal:
          path: metadata.name
          value: allow-kube-api-egress
      - equal:
          path: spec.egress[0].to
          value:
            - ipBlock:
                cidr: 10.0.0.0/8
            - ipBlock:
                cidr: 172.16.0.0/12
            - ipBlock:
                cidr: 192.168.0.0/16
  - it: should contain network policy to allow gateway ingress with correct ports and selectors when istio is enabled
    set:
      istio.enabled: true
      networkPolicies.tests.enabled: true
      networkPolicies.bundled.base.enabled: false
      networkPolicies.bundled.conditional.enabled: false
      networkPolicies.ingressLabels:
        istio: ingressgateway
        app.kubernetes.io/name: public-ingressgateway
      networkPolicies.istioNamespaceSelector.ingress: istio-gateway
      networkPolicies.bundled.dynamic.ingressGateway:
        - port: 20001
          protocol: TCP
        - port: 20002
    asserts:
      - equal:
          path: metadata.name
          value: allow-istio-gateway-ingress
      - contains:
          path: spec.ingress[0].from
          content:
            namespaceSelector:
              matchLabels:
                app.kubernetes.io/name: istio-gateway
            podSelector:
              matchLabels:
                istio: ingressgateway
                app.kubernetes.io/name: public-ingressgateway
      - equal:
          path: spec.ingress[0].ports
          value:
            - port: 20001
              protocol: TCP
            - port: 20002
  - it: should contain network policy to allow sso egress with correct cidr when sso is enabled
    set:
      sso.enabled: true
      networkPolicies.tests.enabled: true
      networkPolicies.bundled.base.enabled: false
      networkPolicies.bundled.conditional.enabled: false
    asserts:
      - equal:
          path: metadata.name
          value: allow-sso-egress
      - contains:
          path: spec.egress[0].to
          content:
            ipBlock:
               cidr: 0.0.0.0/0
               except:
               - 169.254.169.254/32
  - it: should contain network policy to allow sso egress with correct cidr when authservice is enabled
    set:
      authservice.enabled: true
      networkPolicies.tests.enabled: true
      networkPolicies.bundled.base.enabled: false
      networkPolicies.bundled.conditional.enabled: false
    asserts:
      - equal:
          path: metadata.name
          value: allow-sso-egress
      - contains:
          path: spec.egress[0].to
          content:
            ipBlock:
               cidr: 0.0.0.0/0
               except:
               - 169.254.169.254/32
  - it: should properly create egress network policy using shorthand method with only to specified
    set:
      networkPolicies.tests.enabled: true
      networkPolicies.bundled.base.enabled: false
      networkPolicies.bundled.conditional.enabled: false
      networkPolicies.bundled.dynamic.enabled: false
      networkPolicies.package.allow-grafana-egress.enabled: true
      networkPolicies.package.allow-grafana-egress.direction: Egress
      networkPolicies.package.allow-grafana-egress.to: grafana.monitoring
      networkPolicies.package.allow-grafana-egress.ports:
      - port: 3000
    asserts:
      - equal:
          path: metadata.name
          value: allow-grafana-egress
      - equal:
          path: spec.egress[0].to
          value:
            - namespaceSelector:
                matchLabels:
                  kubernetes.io/metadata.name: monitoring
              podSelector:
                matchLabels:
                  app.kubernetes.io/name: grafana
      - equal:
          path: spec.egress[0].ports
          value:
            - port: 3000
  - it: should properly create ingress network policy using shorthand method with both to and from specified
    set:
      networkPolicies.tests.enabled: true
      networkPolicies.bundled.base.enabled: false
      networkPolicies.bundled.conditional.enabled: false
      networkPolicies.bundled.dynamic.enabled: false
      networkPolicies.package.allow-custom-monitor-ingress.enabled: true
      networkPolicies.package.allow-custom-monitor-ingress.direction: Egress
      networkPolicies.package.allow-custom-monitor-ingress.to: "prometheus.monitoring"
      networkPolicies.package.allow-custom-monitor-ingress.ports:
      - port: 20001
        protocol: TCP
    asserts:
      - equal:
          path: metadata.name
          value: allow-custom-monitor-ingress
      - equal:
          path: spec.egress[0].to
          value:
            - namespaceSelector:
                matchLabels:
                  kubernetes.io/metadata.name: monitoring
              podSelector:
                matchLabels:
                  app.kubernetes.io/name: prometheus