# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Network Policies Default Policies Tests
templates:
  - templates/network-policies/render.yaml
release:
  name: test
  namespace: test
set:
  networkPolicies.enabled: true
  networkPolicies.egress.defaults.denyAll.enabled: false
  networkPolicies.egress.defaults.allowInNamespace.enabled: false
  networkPolicies.egress.defaults.allowKubeDns.enabled: false
  networkPolicies.egress.defaults.allowIstiod.enabled: false
  networkPolicies.ingress.defaults.denyAll.enabled: false
  networkPolicies.ingress.defaults.allowInNamespace.enabled: false
  networkPolicies.ingress.defaults.allowPrometheusToIstioSidecar.enabled: false
tests:
  - it: must create deny-all egress policy when enabled
    set:
      networkPolicies.egress.defaults.denyAll.enabled: true
    documentSelector:
      path: metadata.name
      value: default-egress-deny-all
    asserts:
      - equal:
          path: spec
          value:
            podSelector: {}
            policyTypes:
              - Egress

  - it: must create allow-all-in-namespace egress policy when enabled
    set:
      networkPolicies.egress.defaults.allowInNamespace.enabled: true
    documentSelector:
      path: metadata.name
      value: default-egress-allow-all-in-ns
    asserts:
      - equal:
          path: spec
          value:
            podSelector: {}
            policyTypes:
              - Egress
            egress:
              - to:
                  - namespaceSelector:
                      matchLabels:
                        kubernetes.io/metadata.name: test

  - it: must create allow-kube-dns egress policy when enabled
    set:
      networkPolicies.egress.defaults.allowKubeDns.enabled: true
    documentSelector:
      path: metadata.name
      value: default-egress-allow-kube-dns
    asserts:
      - equal:
          path: spec
          value:
            podSelector: {}
            policyTypes:
              - Egress
            egress:
              - to:
                  - namespaceSelector:
                      matchLabels:
                        kubernetes.io/metadata.name: kube-system
                    podSelector:
                      matchLabels:
                        k8s-app: kube-dns
                ports:
                  - port: 53
                    protocol: UDP
                  - port: 53
                    protocol: TCP

  - it: must create allow-istiod egress policy when enabled
    set:
      networkPolicies.egress.defaults.allowIstiod.enabled: true
    documentSelector:
      path: metadata.name
      value: default-egress-allow-istiod
    asserts:
      - equal:
          path: spec
          value:
            podSelector: {}
            policyTypes:
              - Egress
            egress:
              - to:
                  - namespaceSelector:
                      matchLabels:
                        kubernetes.io/metadata.name: istio-system
                    podSelector:
                      matchLabels:
                        app: istiod
                ports:
                  - port: 15012
                    protocol: TCP

  - it: must create deny-all ingress policy when enabled
    set:
      networkPolicies.ingress.defaults.denyAll.enabled: true
    documentSelector:
      path: metadata.name
      value: default-ingress-deny-all
    asserts:
      - equal:
          path: spec
          value:
            podSelector: {}
            policyTypes:
              - Ingress

  - it: must create allow-all-in-namespace ingress policy when enabled
    set:
      networkPolicies.ingress.defaults.allowInNamespace.enabled: true
    documentSelector:
      path: metadata.name
      value: default-ingress-allow-all-in-ns
    asserts:
      - equal:
          path: spec
          value:
            podSelector: {}
            policyTypes:
              - Ingress
            ingress:
              - from:
                  - namespaceSelector:
                      matchLabels:
                        kubernetes.io/metadata.name: test

  - it: must create allow-prometheus ingress policy when enabled
    set:
      networkPolicies.ingress.defaults.allowPrometheusToIstioSidecar.enabled: true
    documentSelector:
      path: metadata.name
      value: default-ingress-allow-prometheus-to-istio-sidecar
    asserts:
      - equal:
          path: spec
          value:
            podSelector: {}
            policyTypes:
              - Ingress
            ingress:
              - from:
                  - namespaceSelector:
                      matchLabels:
                        kubernetes.io/metadata.name: monitoring
                    podSelector:
                      matchLabels:
                        app.kubernetes.io/name: prometheus
                ports:
                  - port: 15020
                    protocol: TCP

  - it: must create multiple default policies when multiple are enabled
    set:
      networkPolicies.egress.defaults.denyAll.enabled: true
      networkPolicies.egress.defaults.allowInNamespace.enabled: true
      networkPolicies.egress.defaults.allowKubeDns.enabled: true
    asserts:
      - hasDocuments:
          count: 3

  - it: must not create default policies when defaults are disabled
    set:
      networkPolicies.egress.defaults.enabled: false
      networkPolicies.ingress.defaults.enabled: false
      networkPolicies.egress.defaults.allowIstiod.enabled: true
      networkPolicies.ingress.defaults.denyAll.enabled: true
    asserts:
      - hasDocuments:
          count: 0

  - it: must respect individual default policy enable flags
    set:
      networkPolicies.egress.defaults.allowInNamespace.enabled: true
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: metadata.name
          value: default-egress-allow-all-in-ns

  - it: must create default policies alongside custom policies
    set:
      networkPolicies.egress.defaults.denyAll.enabled: true
      networkPolicies.egress.from.app.to.k8s.backend/db: true
    asserts:
      - hasDocuments:
          count: 2
      - containsDocument:
          kind: NetworkPolicy
          apiVersion: networking.k8s.io/v1
          name: default-egress-deny-all
          any: true
      - containsDocument:
          kind: NetworkPolicy
          apiVersion: networking.k8s.io/v1
          name: allow-egress-from-app-to-ns-backend-pod-db-any-port
          any: true

  - it: must include default labels on default policies
    set:
      networkPolicies.egress.defaults.denyAll.enabled: true
    documentSelector:
      path: metadata.name
      value: default-egress-deny-all
    asserts:
      - equal:
          path: metadata.labels["network-policies.bigbang.dev/source"]
          value: bb-common
      - equal:
          path: metadata.labels["network-policies.bigbang.dev/direction"]
          value: egress

  - it: must create hook versions of default policies when defaultsAsHooks is enabled
    set:
      networkPolicies.egress.defaults.denyAll.enabled: true
      networkPolicies.egress.defaults.allowInNamespace.enabled: true
      networkPolicies.defaultsAsHooks.enabled: true
    asserts:
      - hasDocuments:
          count: 4  # 2 regular + 2 hook versions
      - containsDocument:
          kind: NetworkPolicy
          apiVersion: networking.k8s.io/v1
          name: default-egress-deny-all
          any: true
      - containsDocument:
          kind: NetworkPolicy
          apiVersion: networking.k8s.io/v1
          name: default-egress-deny-all-as-hook
          any: true
      - containsDocument:
          kind: NetworkPolicy
          apiVersion: networking.k8s.io/v1
          name: default-egress-allow-all-in-ns-as-hook
          any: true

  - it: must add correct hook annotations to hook versions
    set:
      networkPolicies.egress.defaults.denyAll.enabled: true
      networkPolicies.defaultsAsHooks.enabled: true
      networkPolicies.defaultsAsHooks.hooks:
        - pre-install
        - pre-upgrade
      networkPolicies.defaultsAsHooks.weight: -10
      networkPolicies.defaultsAsHooks.deletePolicies:
        - hook-succeeded
    documentSelector:
      path: metadata.name
      value: default-egress-deny-all-as-hook
    asserts:
      - equal:
          path: metadata.annotations["helm.sh/hook"]
          value: pre-install,pre-upgrade
      - equal:
          path: metadata.annotations["helm.sh/hook-weight"]
          value: "-10"
      - equal:
          path: metadata.annotations["helm.sh/hook-delete-policy"]
          value: hook-succeeded

  - it: must not create hook versions when defaultsAsHooks is disabled
    set:
      networkPolicies.egress.defaults.denyAll.enabled: true
      networkPolicies.defaultsAsHooks.enabled: false
    asserts:
      - hasDocuments:
          count: 1
      - containsDocument:
          kind: NetworkPolicy
          apiVersion: networking.k8s.io/v1
          name: default-egress-deny-all
          any: true

  - it: must use default hook configuration when not specified
    set:
      networkPolicies.egress.defaults.denyAll.enabled: true
      networkPolicies.defaultsAsHooks.enabled: true
    documentSelector:
      path: metadata.name
      value: default-egress-deny-all-as-hook
    asserts:
      - equal:
          path: metadata.annotations["helm.sh/hook"]
          value: pre-install,pre-upgrade,post-delete
      - equal:
          path: metadata.annotations["helm.sh/hook-weight"]
          value: "-5"
      - equal:
          path: metadata.annotations["helm.sh/hook-delete-policy"]
          value: hook-succeeded,before-hook-creation

  - it: must create hook versions of default ingress policies when defaultsAsHooks is enabled
    set:
      networkPolicies.ingress.defaults.denyAll.enabled: true
      networkPolicies.ingress.defaults.allowInNamespace.enabled: true
      networkPolicies.defaultsAsHooks.enabled: true
    asserts:
      - hasDocuments:
          count: 4  # 2 regular + 2 hook versions
      - containsDocument:
          kind: NetworkPolicy
          apiVersion: networking.k8s.io/v1
          name: default-ingress-deny-all
          any: true
      - containsDocument:
          kind: NetworkPolicy
          apiVersion: networking.k8s.io/v1
          name: default-ingress-deny-all-as-hook
          any: true
      - containsDocument:
          kind: NetworkPolicy
          apiVersion: networking.k8s.io/v1
          name: default-ingress-allow-all-in-ns-as-hook
          any: true

  - it: must add correct hook annotations to ingress hook versions
    set:
      networkPolicies.ingress.defaults.denyAll.enabled: true
      networkPolicies.defaultsAsHooks.enabled: true
      networkPolicies.defaultsAsHooks.hooks:
        - pre-install
        - pre-upgrade
      networkPolicies.defaultsAsHooks.weight: -10
      networkPolicies.defaultsAsHooks.deletePolicies:
        - hook-succeeded
    documentSelector:
      path: metadata.name
      value: default-ingress-deny-all-as-hook
    asserts:
      - equal:
          path: metadata.annotations["helm.sh/hook"]
          value: pre-install,pre-upgrade
      - equal:
          path: metadata.annotations["helm.sh/hook-weight"]
          value: "-10"
      - equal:
          path: metadata.annotations["helm.sh/hook-delete-policy"]
          value: hook-succeeded

  - it: must not create ingress hook versions when defaultsAsHooks is disabled
    set:
      networkPolicies.ingress.defaults.denyAll.enabled: true
      networkPolicies.defaultsAsHooks.enabled: false
    asserts:
      - hasDocuments:
          count: 1
      - containsDocument:
          kind: NetworkPolicy
          apiVersion: networking.k8s.io/v1
          name: default-ingress-deny-all
          any: true

  - it: must use default hook configuration for ingress when not specified
    set:
      networkPolicies.ingress.defaults.denyAll.enabled: true
      networkPolicies.defaultsAsHooks.enabled: true
    documentSelector:
      path: metadata.name
      value: default-ingress-deny-all-as-hook
    asserts:
      - equal:
          path: metadata.annotations["helm.sh/hook"]
          value: pre-install,pre-upgrade,post-delete
      - equal:
          path: metadata.annotations["helm.sh/hook-weight"]
          value: "-5"
      - equal:
          path: metadata.annotations["helm.sh/hook-delete-policy"]
          value: hook-succeeded,before-hook-creation

